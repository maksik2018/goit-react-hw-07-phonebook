{"version":3,"sources":["components/Container.styled.jsx","components/Container.jsx","redux/reducers/contactsSlice.js","components/Spinner/Spinner.js","components/ContactForm.jsx","redux/reducers/filterSlice.js","components/ContactList.styled.jsx","components/ContactItem.jsx","components/ContactList.jsx","components/Filter.jsx","App.js","redux/store.js","index.js"],"names":["Div","styled","div","Container","children","contactsApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","tagTypes","endpoints","builder","fetchContacts","query","providesTags","createContacts","mutation","newContact","url","method","body","invalidatesTags","deleteContacts","contactId","useFetchContactsQuery","useCreateContactsMutation","useDeleteContactsMutation","spin","keyframes","Spinner","CgSpinner","defaultProps","size","ContactForm","useState","name","setName","number","setNumber","createContact","isCreating","isLoading","contacts","data","onChange","e","target","value","onSubmit","preventDefault","find","contact","toLowerCase","alert","placeholder","type","pattern","title","required","filterSlice","createSlice","initialState","reducers","filter","state","action","payload","actions","getFilter","List","ul","Item","li","ContactItem","id","onDeleteContact","isDeleting","onClick","disabled","ContactList","contactList","filterValue","useSelector","includes","trim","map","Filter","dispatch","useDispatch","App","store","configureStore","reducer","middleware","getDefaultMiddleware","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8cd2a4fc.chunk.js","sourcesContent":["import styled from '@emotion/styled';\r\n\r\nexport const Div = styled.div`\r\n  margin-left: 30px;\r\n`;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Div } from '../components/Container.styled';\r\n\r\nexport default function Container({ children }) {\r\n  return <Div>{children}</Div>;\r\n }\r\n\r\nContainer.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\n","import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\r\nexport const contactsApi = createApi({\r\n  reducerPath: \"contactsApi\",\r\n  baseQuery: fetchBaseQuery({\r\n    baseUrl: \"https://616c02ac16c3fa001717187e.mockapi.io/\",\r\n  }),\r\n  tagTypes: [\"Contacts\"],\r\n  endpoints: (builder) => ({\r\n    fetchContacts: builder.query({\r\n      query: () => `/contacts`,\r\n      providesTags: [\"Contacts\"],\r\n    }),\r\n    createContacts: builder.mutation({\r\n      query: (newContact) => ({\r\n        url: `/contacts`,\r\n        method: \"POST\",\r\n        body: newContact,\r\n      }),\r\n      invalidatesTags: [\"Contacts\"],\r\n    }),\r\n\r\n    deleteContacts: builder.mutation({\r\n      query: (contactId) => ({\r\n        url: `/contacts/${contactId}`,\r\n        method: `DELETE`,\r\n      }),\r\n      invalidatesTags: [\"Contacts\"],\r\n    }),\r\n  }),\r\n});\r\n\r\nexport const {\r\n  useFetchContactsQuery,\r\n  useCreateContactsMutation,\r\n  useDeleteContactsMutation,\r\n} = contactsApi;\r\n","import styled from \"@emotion/styled/macro\";\r\nimport { keyframes } from \"@emotion/react\";\r\nimport { CgSpinner } from \"react-icons/cg\";\r\n\r\nconst spin = keyframes`\r\n0% {\r\n  transform: rotate(0deg);\r\n}\r\n100% {\r\n  transform: rotate(1turn);\r\n}\r\n`;\r\n\r\nexport const Spinner = styled(CgSpinner)`\r\n  animation: ${spin} 0.85s linear infinite;\r\n`;\r\n\r\nSpinner.defaultProps = {\r\n  size: 40,\r\n};\r\n","import { React, useState } from 'react';\r\nimport { useCreateContactsMutation, useFetchContactsQuery } from '../redux/reducers/contactsSlice';\r\nimport { Spinner } from \"../components/Spinner/Spinner\";\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction ContactForm() {\r\n  const [name, setName] = useState('');\r\n   const [number, setNumber] = useState('');\r\n   const [createContact,  { isLoading: isCreating }] = useCreateContactsMutation();\r\n  const { data: contacts } = useFetchContactsQuery();\r\n  \r\n \r\n  const onChange = e => {\r\n       const { name, value } = e.target;\r\n\r\n    switch (name) {\r\n      case \"name\":\r\n        setName(value);\r\n        break;\r\n      case \"number\":\r\n        setNumber(value);\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    \r\n   \r\n     const checkOnContact = contacts.find(\r\n      (contact) => contact.name.toLowerCase() === name.toLowerCase()\r\n    );\r\n\r\n    if (checkOnContact) {\r\n      alert(`${name} is already in contacts`);\r\n      setName(\"\");\r\n      setNumber(\"\");\r\n      return;\r\n    }\r\n     if (name === \"\" && number === \"\") {\r\n      alert(\"Please fill empty fields\");\r\n      return;\r\n    }\r\n    createContact({ name, number });\r\n    setName(\"\");\r\n    setNumber(\"\");\r\n      };\r\n\r\n    \r\n    return (\r\n      <form onSubmit={handleSubmit}>\r\n         <input\r\n          placeholder=\"indicate your name\"\r\n          value={name}\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          onChange={onChange}\r\n        />\r\n           <input\r\n          placeholder=\"indicate your phone number\"\r\n          value={number}\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n          onChange={onChange}\r\n        />\r\n        <button type='submit'>\r\n           {isCreating && <Spinner size={20} />}\r\n          Add contact</button>\r\n        \r\n      </form>\r\n    );\r\n  }\r\n\r\n\r\nContactForm.propTypes = {\r\n    contacts: PropTypes.func,\r\n};\r\n\r\nexport default ContactForm;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = \"\";\r\n\r\nconst filterSlice = createSlice({\r\n  name: \"contacts/filter\",\r\n  initialState,\r\n  reducers: {\r\n    filter: (state, action) => (state = action.payload),\r\n  },\r\n});\r\nexport const { filter } = filterSlice.actions;\r\nexport const getFilter = (state) => state.filter;\r\nexport default filterSlice.reducer;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const List = styled.ul`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\nexport const Item = styled.li`\r\n  margin-right: 40px;\r\n  list-style: none;\r\n`;\r\n","import { useDeleteContactsMutation } from '../redux/reducers/contactsSlice';\r\nimport { Spinner } from './Spinner/Spinner';\r\nimport { Item } from \"./ContactList.styled\";\r\n\r\n\r\nexport const ContactItem = ({ name, number, id } ) => {\r\n    const [onDeleteContact, { isLoading: isDeleting }] = useDeleteContactsMutation();\r\n       return (\r\n            <Item>\r\n            <p>{name}</p>\r\n            <p>{number}</p> \r\n      <button onClick={() => onDeleteContact(id)} disabled={isDeleting}>\r\n        {isDeleting && <Spinner size={20} />}\r\n        Delete\r\n      </button>\r\n    </Item>\r\n  );\r\n};","import React from 'react';\r\nimport { useSelector } from \"react-redux\";\r\nimport { getFilter } from '../redux/reducers/filterSlice';\r\n// import { useDeleteContactsMutation, useFetchContactsQuery } from '../redux/reducers/contactsSlice';\r\nimport { useFetchContactsQuery } from '../redux/reducers/contactsSlice';\r\nimport PropTypes from \"prop-types\";\r\n// import { Spinner } from \"../components/Spinner/Spinner\";\r\nimport { List } from \"../components/ContactList.styled\";\r\nimport { ContactItem } from \"./ContactItem\";\r\n\r\nfunction ContactList() {\r\n  const { data: contactList } = useFetchContactsQuery();\r\n  // const [onDeleteContact, { isLoading: isDeleting }] = useDeleteContactsMutation();\r\n  const filterValue = useSelector((state) => getFilter(state));\r\n  const contacts = contactList?.filter((contact) =>\r\n    contact.name.toLowerCase().includes(filterValue.toLowerCase().trim())\r\n  );\r\n\r\n  // return (\r\n  //   <List>\r\n  //     {contactList && contacts.map((contact) => (\r\n  //     // {filtered.map((contact) => (\r\n  //       <Item key={contact.id} >\r\n  //         <p>{contact.name}</p>\r\n  //         <p>{contact.number}</p>\r\n  //         <button type=\"button\" onClick={() => onDeleteContact(contact.id)}>\r\n  //             {isDeleting && <Spinner size={20} />}\r\n  //           Удалить</button>\r\n  //       </Item>\r\n  //     ))}\r\n  //   </List>\r\n  // );\r\n  \r\n  return (\r\n    <List >\r\n      {contactList && contacts.map((contact) => (\r\n        <ContactItem key={contact.id} {...contact}/>\r\n       \r\n      ))}\r\n      \r\n    </List>\r\n  );\r\n}\r\nContactList.propTypes = {\r\n  contactList: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string,\r\n      name: PropTypes.string,\r\n      number: PropTypes.string,\r\n    }),\r\n  ),\r\n  onDeleteContact: PropTypes.func,\r\n};\r\n\r\nexport default ContactList;","import React from 'react';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { filter, getFilter } from \"../redux/reducers/filterSlice\";\r\n// import { getFilter } from '../selectors/contacts-selector';\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction Filter() {\r\n  const dispatch = useDispatch();\r\n  const value = useSelector((state) => getFilter(state));\r\n  const onChange = (e) => {\r\n    dispatch(filter(e.target.value));\r\n  };\r\n\r\n   return (\r\n   <label>\r\n        Find contacts by name <input type=\"text\" value={value} onChange={onChange} />\r\n    </label>\r\n  );\r\n}\r\n\r\nFilter.propTypes = {\r\n    value: PropTypes.string,\r\n    onChange: PropTypes.func,\r\n};\r\n\r\nexport default Filter;","import Container from \"./components/Container\";\nimport ContactForm from \"./components/ContactForm\";\nimport ContactList from \"./components/ContactList\";\nimport Filter from \"./components/Filter\";\nimport \"./App.css\";\n\nexport default function App() {\n  return (\n    <Container>\n      <h1> Phonebook </h1>\n      <h2>Add new contact</h2>\n      {/* <ContactForm onSubmit={addContact} /> */}\n      <ContactForm />\n      <h2>Find contact</h2>\n      <Filter />\n      {/* <Filter value={filter} onChange={onFilterChange} /> */}\n      <h2>Contact list</h2>\n      {/* <ContactList contacts={filterByName()} onDeleteContact={deleteContact} /> */}\n      <ContactList />\n    </Container>\n  );\n}\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport { contactsApi } from \"./reducers/contactsSlice\";\r\nimport filter from \"./reducers/filterSlice\";\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    [contactsApi.reducerPath]: contactsApi.reducer,\r\n    filter,\r\n  },\r\n  middleware: (getDefaultMiddleware) => [\r\n    ...getDefaultMiddleware(),\r\n    contactsApi.middleware,\r\n  ],\r\n\r\n  devTools: process.env.NODE_ENV === \"development\",\r\n});\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { store } from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}